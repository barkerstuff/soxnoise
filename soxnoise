#!/usr/bin/env python3

# Soxnoise - A simple ncurses based noise generator that uses the power of sox
# copyright (C) 2018  Jason Barker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# ToDo
# - Test on Windows
# - Test on BSD
# - Maybe add a pink+brown option

import subprocess
import argparse
from sys import exit
from sys import stdout
import curses
from curses import wrapper
import curses.panel

colorlist=['pink','brown','white']

# Set up the parser
parser = argparse.ArgumentParser(description="An ncurses utility for playing noise on the terminal with SoX")
parser.set_defaults(color='pink',volume=1,keepvolume=True,reverb=0,centerfreq=1786,bitdepth=16,tremolo_speed=1,tremolo_depth=0)
parser.add_argument('-c','--color',help="Selects the colour of the noise to play. Available options are {0}.".format(colorlist))
parser.add_argument('-b','--bitdepth',help="Sets the bit depth.  Typical values are 16 and 24.",type=int)
parser.add_argument('-d','--duration',help="Play for a specified time and then stop. The format should be a string of hh:mm:dd or an integer value in seconds.",type=str)
parser.add_argument('-v','--volume',help="Sets the initial output volume. This takes a float.  Try to remain within values of 0-10 to prevent distortion.",type=float)
parser.add_argument('-n','--disabletui',help="Disables the ncurses interface. This will make soxnoise non-interactive.",action="store_true")
parser.add_argument('-r','--reverb',help="Sets an initial reverb level (values from 0-100).",type=int)
parser.add_argument('-C','--centerfreq',help="Sets an initial center frequency (values in Hz from 1-20000)",type=int)
parser.add_argument('-t','--tremolo_speed',help="Sets the speed of the tremolo effect (values in Hz from 0-20,000). It require also setting the --tremolo_depth.",type=float)
parser.add_argument('-T','--tremolo_depth',help="Sets the depth of the tremolo effect (values in from 1-100). It require also setting the --tremolo_speed.",type=int)
args = parser.parse_args()

# Sanity check on the args
if 0 < args.reverb > 100:
    exit('Please specify a reverb from 0-100')
if 1 < args.centerfreq > 20000:
    exit('Please specify a center frequency from 1 to 20,000 (in Hz)')
if 0 < args.tremolo_speed > 20000:
    exit('Please specify a tremolo speed from 1 to 20000 (in Hz')
if 0 < args.tremolo_depth > 100:
    exit('Please specify a tremolo depth level from 0 to 100 (percentage)')
if  args.tremolo_depth and not args.tremolo_speed and not args.tremolo_depth == 0:
    exit('Specifying tremolo depth requires also specifying tremolo speed')
if  args.tremolo_speed and not args.tremolo_depth and not args.tremolo_depth == 0:
    exit('Specifying tremolo speed requires also specifying tremolo depth')

# Set the window title
stdout.write("\x1b]2;soxnoise\x07")

# Sets up additional default sox parameters not in the argparse
sox_repeats=58; g="0.00"

# Do not alter this global. Needed so that sox knows whether or not to reinitialise the entire TUI
tui_started = False

def print_license():
    print("Soxnoise version 1, Copyright (C) 2018 Jason Barker")
    print("Soxnoise comes with ABSOLUTELY NO WARRANTY; for details see https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html")
    print("This is free software, and you are welcome to redistribute it under certain conditions.")

def main(stdscr):
    call_sox(stdscr)

# Stdscr is created by the sox wrapper which is wrapped around the tui initialisation
# part of call_sox(stdscr)
def tui_init(stdscr):
    # Calls the curses init function and returns the main window object
    global tui_started

    # Makes the cursor invisible
    curses.curs_set(0)

    # Disabled echo.  Not needed when using curses.wrapper()
    #curses.noecho()

    # Needed to return the timeout back to its default after the help menu thing lengthens it
    getch_timeout = 100

    # Init the cbreak mode for instant keyread. Not needed when using wrapper
    curses.cbreak()

    # Not entirely sure why or what
    stdscr.keypad(1)

    # Set stdscr to the appropriate getch timeout
    # This is defined a few lines above
    #  n.b. that the help submenu will dynamically adjust this and then restore it back to getch_timeout
    stdscr.timeout(getch_timeout)

    # Allow scrolling
    stdscr.scrollok(1)

    # Start colors if available
    if curses.has_colors():
        curses.start_color()

    # Sets up some basic colour pairs
    curses.init_pair(1,curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2,curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3,curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    curses.init_pair(4,curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(5,curses.COLOR_WHITE, curses.COLOR_BLACK)

    print_license()

    # This function redraws the UI and screen
    # This is called below on the various key presses and actions to redraw the UI
    def update():
        # Sets args.volume so that it stays formatted to just a few decimal places
        args.volume = float("{:0.1f}".format(args.volume))

        # Clears the main curses screen
        stdscr.clear()

        # Prints the noise type and volume
        if args.color == 'white':
            stdscr.addstr(args.color,curses.color_pair(5))
            stdscr.addstr(" vol. ",curses.color_pair(4))
            stdscr.addstr(str(args.volume),curses.color_pair(4))
        if args.color == 'pink':
            stdscr.addstr(args.color,curses.color_pair(3))
            stdscr.addstr(" vol. ",curses.color_pair(4))
            stdscr.addstr(str(args.volume),curses.color_pair(4))
        if args.color == 'brown':
            stdscr.addstr(args.color,curses.color_pair(1))
            stdscr.addstr(" vol. ",curses.color_pair(4))
            stdscr.addstr(str(args.volume),curses.color_pair(4))
        # Prints the reverb level
        stdscr.addstr("  (r)everb. ",curses.color_pair(1))
        stdscr.addstr(str(args.reverb),curses.color_pair(1))
        # Prints the center frequency
        stdscr.addstr("  (c)enterHz. ",curses.color_pair(2))
        stdscr.addstr(str(args.centerfreq),curses.color_pair(2))
        # Prints the center depth
        stdscr.addstr("  (t)remolo depth. ",curses.color_pair(1))
        stdscr.addstr(str(args.tremolo_depth),curses.color_pair(1))
        # Prints the tremolo speed
        stdscr.addstr("  (f)req. ",curses.color_pair(1))
        stdscr.addstr(str(args.tremolo_speed),curses.color_pair(1))

        # Refresh screen
        try:
            stdscr.noutrefresh()
            curses.doupdate()
        except Exception as E:
            stdscr.clear()
            stdscr.addstr("Term too small")

    # Let the sox call function know that tui has been started, to avoid restarting it
    tui_started = True

    # Do the first screen update in order to draw the TUI
    update()

    # This is the main loop that controls the entire TUI
    while True:

    	# Listen for input
        c = stdscr.getch()

    	# Now take user input
        if c == ord('q'):
            while True:
                f.kill()
                cleanup()
        # Adjust the volume on the fly (smaller increment)
        elif c == ord('-'):
            if args.volume > 0.10:
                args.volume -= 0.10
            elif args.volume <= 0.10:
                args.volume = 0
            f.kill(); call_sox(stdscr); update()
        elif c == ord('=') or c == ord('+'):
            if args.volume < 30 or c == ord('='):
                args.volume += 0.10
            f.kill(); call_sox(stdscr); update()


        # Adjust the volume on the fly (larger increment)
        elif c == ord('9'):
            if args.volume > 0.25:
                args.volume -= 0.25
            elif args.volume <= 0.25:
                args.volume = 0
            f.kill(); call_sox(stdscr); update()
        elif c == ord('0'):
            if args.volume < 30 or c == ord('='):
                args.volume += 0.25
            f.kill(); call_sox(stdscr); update()

        # M to mute
        elif c == ord('m'):
            if args.volume > 0:
                args.volume = 0.0
                #oldvol=float(args.volume)
            elif args.volume == 0.0:
                #args.volume = float(oldvol)
                args.volume = 1
            f.kill(); call_sox(stdscr); update()

        # Adjusts center frequency on the fly in Hz
        elif c == ord('c'):
            if args.centerfreq < 4000:
                args.centerfreq += 100
            f.kill(); call_sox(stdscr); update()
        elif c == ord('C'):
            if args.centerfreq > 100:
                args.centerfreq -= 100
            f.kill(); call_sox(stdscr); update()

        # Adjusts tremolo depth
        elif c == ord('t'):
            if args.tremolo_depth < 90:
                args.tremolo_depth += 10
            f.kill(); call_sox(stdscr); update()
        elif c == ord('T'):
            if args.tremolo_depth > 10:
                args.tremolo_depth -= 10
            else:
                args.tremolo_depth = 0
            f.kill(); call_sox(stdscr); update()

        # Adjusts tremolo frequency
        elif c == ord('f'):

            stdscr.timeout(1000000)
            curses.echo(1)

            new_freq = ""
            while len(str(new_freq)) == 0:
                new_freq = stdscr.getstr()
            args.tremolo_speed = float(new_freq)
            curses.echo(0)
            # Sets a longer timeout to wait for getch (since the user probably wants to read it)
            f.kill(); call_sox(stdscr); update()


        elif c == ord('F'):
            position = calculate_logposition(args.tremolo_speed)
            if args.tremolo_speed > 0.1:
                position -= 1
                args.tremolo_speed = calculate_logvalue(position)
            else:
                args.tremolo_speed = 0
            f.kill(); call_sox(stdscr); update()

        # Adjusts reverb
        elif c == ord('r'):
            if args.reverb < 90:
                args.reverb += 10
            else:
                args.reverb = 100
            f.kill(); call_sox(stdscr); update()
        elif c == ord('R'):
            if args.reverb > 10:
                args.reverb -= 10
            else:
                args.reverb = 0
            f.kill(); call_sox(stdscr); update()

        # Switch noise types on the fly
        elif c == ord('b'):
            args.color = 'brown'
            f.kill(); call_sox(stdscr); update()
        elif c == ord('w'):
            args.color = 'white'
            f.kill(); call_sox(stdscr); update()
        elif c == ord('p'):
            args.color = 'pink'
            f.kill(); call_sox(stdscr); update()

        # Brings up help dialog
        elif c == ord('h'):

            # Sets a longer timeout to wait for getch (since the user probably wants to read it)
            stdscr.timeout(1000000)

            # Try and except block to catch when the term gets too tiny
            try:
                stdscr.addstr(1,1,"In help")
                stdscr.addstr(3,0,"9/0 -/+  : adjusts volume")
                stdscr.addstr(4,0,"c/C : adjusts center frequency")
                stdscr.addstr(5,0,"r/R : adjusts reverb level")
                stdscr.addstr(6,0,"f/F : adjusts tremolo frequency")
                stdscr.addstr(7,0,"d/D : adjusts tremolo depth")
                stdscr.addstr(9,0,"m : mute the audio")
                stdscr.addstr(10,0,"p/b/w : selects different noise profiles")
                stdscr.addstr(11,0," (p)ink (b)rown (w)hite",curses.color_pair(2))
                stdscr.addstr(12,0,"  press h to exit help",curses.color_pair(1))
            except:
                stdscr.clear()
                stdscr.addstr('Terminal too small')


            # Waits for help window to close before allowing any further updates to the screen
            b = stdscr.getch()
		
            if b == ord('h'):
                c = ''
                # Returns the timeout back to the original value
                stdscr.timeout(int(getch_timeout))
                update()

def call_sox(stdscr):
    global f, tui_started

    # If duration is specified as a starting argument then sox will receive this parameter
    #  the correct format is either hh:mm:ss or a straight integer of the desired seconds duration
    if args.volume == 0:
        subprocess_list = []
    elif args.duration and not args.tremolo_depth==0:
        subprocess_list = ['play','-b',str(args.bitdepth),'-c','2','--null','synth',str(args.duration),str(args.color)+'noise','band','-n',str(args.centerfreq),'499','tremolo',str(args.tremolo_speed),str(args.tremolo_depth),'reverb',str(args.reverb),'bass','-11','treble','-1','vol',str(args.volume)]
    elif args.duration and args.tremolo_depth==0:
        subprocess_list = ['play','-b',str(args.bitdepth),'-c','2','--null','synth',str(args.duration),str(args.color)+'noise','band','-n',str(args.centerfreq),'reverb',str(args.reverb),'bass','-11','treble','-1','vol',str(args.volume)]
    elif not args.duration and args.tremolo_depth==0:
        subprocess_list = ['play','-q','-b',str(args.bitdepth),'-c','2','--null','synth',str(args.color)+'noise','band','-n',str(args.centerfreq),'reverb',str(args.reverb),'bass','-11','treble','-1','vol',str(args.volume)]
    elif not args.duration and not args.tremolo_depth==0:
        subprocess_list = ['play','-q','-b',str(args.bitdepth),'-c','2','--null','synth',str(args.color)+'noise','band','-n',str(args.centerfreq),'499','tremolo',str(args.tremolo_speed),str(args.tremolo_depth),'reverb',str(args.reverb),'bass','-11','treble','-1','vol',str(args.volume)]
    else:
        print('Oops. Fell off the end of the subprocess caller block. Please send help')

    # Used for subprocess debug
    #exit(" ".join(subprocess_list))

    # Don't start the subprocess if SoX is muted
    print(args.volume)
    if args.volume == 0:
        pass

    # If TUI is disabled then keep the normal sox console output
    # Otherwise pipe it all so that only the TUI can be seen
    elif args.disabletui:
        curses.endwin()
        f = subprocess.call(subprocess_list)
        curses.echo(1); curses.nocbreak(); curses.curs_set(1)
    elif not args.disabletui:
        #f = subprocess.Popen(subprocess_list,stderr=subprocess.PIPE,stdout=subprocess.PIPE)
        f = subprocess.Popen(subprocess_list) # Useful for troubleshooting

    if not tui_started:
        # Starts the tui unless explicitly disabled
        if not args.disabletui:
            tui_init(stdscr)

# Called to shut everything down
def cleanup():
    # Reset terminal title
    stdout.write("\x1b]2;\x07")

    print_license()
    exit()

if __name__ == '__main__':
    try:
        wrapper(main)
    except KeyboardInterrupt:
        cleanup()

