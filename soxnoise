#!/usr/bin/env python3

# Soxnoise - A simple ncurses based noise generator that uses the power of sox
# copyright (C) 2018  Jason Barker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# ToDo
# - Test on Windows
# - Test on BSD
# - Consider adding a small random component to the values

from __future__ import print_function
import subprocess
import argparse
from sys import exit
from sys import stdout
import curses
from curses import wrapper
import curses.panel

COLORLIST = ['pink', 'brown', 'white', 'pinkbrown']

# Create the the parser
PARSER = argparse.ArgumentParser(description="An ncurses utility for playing noise on the terminal with SoX")

# Populate parser with values
PARSER.set_defaults(color='pink', volume=1, keepvolume=True, reverb=0, maxvol=2, bitdepth=16,
                    tremolo_speed=0.1, tremolo_depth=0, channels=2, duration=0, sinemod=True, sinemod_min_vol=90, sinemod_speed=0.1)
PARSER.add_argument('-c', '--color',
                    help="Selects the colour of the noise to play. Available options are {0}.".format(COLORLIST))
PARSER.add_argument('-C', '--channels',
                    help="Selects the number of channels to use.  Default is 2 (stereo)",
                    type=int)
PARSER.add_argument('-b', '--bitdepth',
                    help="Sets the bit depth.  Typical values are 16 and 24.",
                    type=int)
PARSER.add_argument('-d', '--duration',
                    help="Play for a specified time and then stop. The format should be a string of hh:mm:dd or an integer value in seconds.",
                    type=str)
PARSER.add_argument('-s', '--sinemod',
                    help="Modulate the noise with a sine wave.  Gives a smoother, arguably more pleasing output",
                    action='store_true')
PARSER.add_argument('-v', '--volume',
                    help="Sets the initial output volume. This takes a float.  Try to remain within values of 0-2 to prevent distortion.",
                    type=float)
PARSER.add_argument('-V', '--maxvolume',
                    help="Sets the maximum sox output volume. This takes a float.  Try to remain within values of 0-2 to minimise distortion.",
                    type=float)
PARSER.add_argument('-n', '--disabletui',
                    help="Disables the ncurses interface. This will make soxnoise non-interactive.",
                    action="store_true")
PARSER.add_argument('-r', '--reverb',
                    help="Sets an initial reverb level (values from 0-100).",
                    type=int)
PARSER.add_argument('-m', '--sinemod_speed',
                    help="Sets the speed of the sinewave modulation effect (values in Hz from 0-20,000). Requires setting --sinemod_min_vol",
                    type=float)
PARSER.add_argument('-M', '--sinemod_min_vol',
                    help="Sets the minimum value of the modulated sine output.\
                    This effectively sets the minimum noise volume. (values in from 1-100). Requires setting --sinemod_speed.",
                    type=int)
PARSER.add_argument('-t', '--tremolo_speed',
                    help="Sets the speed of the tremolo effect (values in Hz from 0-20,000). It require also setting the --tremolo_depth.",
                    type=float)
PARSER.add_argument('-T', '--tremolo_depth',
                    help="Sets the depth of the tremolo effect (values in from 1-100). This requires also setting the --tremolo_speed.",
                    type=int)
ARGS = PARSER.parse_args()

# Sanity check on the args
if 0 < ARGS.reverb > 100:
    exit('Please specify a reverb from 0-100')
if int(ARGS.channels) < 1:
    exit('The number of channels must be 1 at minimum and may not be negative')
if 0 < ARGS.tremolo_speed > 20000:
    exit('Please specify a tremolo speed from 1 to 20000 (in Hz')
if 0 < ARGS.tremolo_depth > 100:
    exit('Please specify a tremolo depth level from 0 to 100 (percentage)')
if  ARGS.tremolo_depth and not ARGS.tremolo_speed and not ARGS.tremolo_depth == 0:
    exit('Specifying tremolo depth requires also specifying tremolo speed')
if  ARGS.tremolo_speed and not ARGS.tremolo_depth and not ARGS.tremolo_depth == 0:
    exit('Specifying tremolo speed requires also specifying tremolo depth')
if ARGS.color not in COLORLIST:
    exit('An invalid noise colour was specified')

# Set the window title
stdout.write("\x1b]2;soxnoise\x07")

# Do not alter this global. Needed so that sox knows whether or not to reinitialise the entire TUI
tui_started = False

def print_license():
    ''' Prints the license '''
    print("Soxnoise version 1, Copyright (C) 2018 Jason Barker")
    print("Soxnoise comes with ABSOLUTELY NO WARRANTY; for details see https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html")
    print("This is free software, and you are welcome to redistribute it under certain conditions.")

def main(stdscr):
    ''' calls sox with stdscr '''
    call_sox(stdscr)

# Stdscr is created by the sox wrapper which is wrapped around the tui initialisation
# part of call_sox(stdscr)
def tui_init(stdscr):
    ''' Initialises and configures the TUI  '''

    # Calls the curses init function and returns the main window object
    global tui_started

    # Makes the cursor invisible
    curses.curs_set(0)

    # Disabled echo.  Not needed when using curses.wrapper()
    #curses.noecho()

    # Needed to return the timeout back to its default after the help menu thing lengthens it
    getch_timeout = 100

    # Init the cbreak mode for instant keyread. Not needed when using wrapper
    curses.cbreak()

    # Not entirely sure why or what
    stdscr.keypad(1)

    # Set stdscr to the appropriate getch timeout
    # This is defined a few lines above
    #  n.b. that the help submenu will dynamically adjust this and then restore it back to getch_timeout
    stdscr.timeout(getch_timeout)

    # Allow scrolling
    stdscr.scrollok(1)

    # Start colors if available
    if curses.has_colors():
        curses.start_color()

    # Sets up some basic colour pairs
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_BLACK)

    print_license()

    def update():
        ''' Updates and redraws the curses window '''
        # Sets ARGS.volume so that it stays formatted to just a few decimal places
        ARGS.volume = float("{:0.2f}".format(ARGS.volume))

        # Clears the main curses screen
        stdscr.clear()

        # Prints the noise type and volume
        if ARGS.color == 'white':
            stdscr.addstr(ARGS.color, curses.color_pair(5))
            stdscr.addstr(" vol. ", curses.color_pair(4))
            stdscr.addstr(str(ARGS.volume), curses.color_pair(4))
        if ARGS.color == 'pink':
            stdscr.addstr(ARGS.color, curses.color_pair(3))
            stdscr.addstr(" vol. ", curses.color_pair(4))
            stdscr.addstr(str(ARGS.volume), curses.color_pair(4))
        if ARGS.color == 'pinkbrown':
            stdscr.addstr(ARGS.color, curses.color_pair(2))
            stdscr.addstr(" vol. ", curses.color_pair(4))
            stdscr.addstr(str(ARGS.volume), curses.color_pair(4))
        if ARGS.color == 'brown':
            stdscr.addstr(ARGS.color, curses.color_pair(1))
            stdscr.addstr(" vol. ", curses.color_pair(4))
            stdscr.addstr(str(ARGS.volume), curses.color_pair(4))

        # Prints the mute status
        if ARGS.volume == 0:
            stdscr.addstr(0, 23, "mute ", curses.color_pair(2))


        # Prints the reverb level
        stdscr.addstr(2, 1, "(r)everb. ", curses.color_pair(1))
        stdscr.addstr(str(ARGS.reverb), curses.color_pair(1))
        # Prints the tremolo depth
        stdscr.addstr(3, 1, "(t)remolo depth. ", curses.color_pair(3))
        stdscr.addstr(str(ARGS.tremolo_depth), curses.color_pair(3))
        # Prints the tremolo speed
        stdscr.addstr(3, 23, "tremolo (f)req. ", curses.color_pair(3))
        stdscr.addstr(str(ARGS.tremolo_speed), curses.color_pair(3))

        # Prints the sinemod sine frequency if enabled
        if ARGS.sinemod:
            stdscr.addstr(2, 23, "sine mode: enabled ", curses.color_pair(1))
            stdscr.addstr(4, 1, "(s)ine frequency ", curses.color_pair(2))
            stdscr.addstr(str(ARGS.sinemod_speed), curses.color_pair(2))
            # Prints the sinemod minimum volume
            stdscr.addstr(4, 23, "sine min. (v)olume ", curses.color_pair(2))
            stdscr.addstr(str(ARGS.sinemod_min_vol), curses.color_pair(2))

        # Refresh screen
        try:
            stdscr.noutrefresh()
            curses.doupdate()
        except Exception:
            stdscr.clear()
            stdscr.addstr("Term too small")

    # Let the sox call function know that tui has been started, to avoid restarting it
    tui_started = True

    # Do the first screen update in order to draw the TUI
    update()

    # This is the main loop that controls the entire TUI
    while True:

    	# Listen for input
        input_char = stdscr.getch()

    	# Now take user input

        # Quit function
        if input_char == ord('q'):
            while True:
                f.kill()
                cleanup()

        # Adjust the volume on the fly (smaller increment)
        elif input_char == ord('-') or input_char == ord('_'):
            if ARGS.volume > 0.025:
                ARGS.volume -= 0.025
            elif ARGS.volume <= 0.025:
                ARGS.volume = 0
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('=') or input_char == ord('+'):
            if ARGS.volume < ARGS.maxvol:
                ARGS.volume += 0.025
            f.kill(); call_sox(stdscr); update()


        # Adjust the volume on the fly (larger increment)
        elif input_char == ord('9'):
            if ARGS.volume > 0.2:
                ARGS.volume -= 0.2
            elif ARGS.volume <= 0.2:
                ARGS.volume = 0
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('0'):
            if ARGS.volume < ARGS.maxvol:
                ARGS.volume += 0.2
            else:
                ARGS.volume = ARGS.maxvol
            f.kill(); call_sox(stdscr); update()

        # M to mute
        elif input_char == ord('m'):
            if ARGS.volume > 0:
                oldvol = float(ARGS.volume)
                ARGS.volume = 0.0
            elif ARGS.volume == 0.0:
                ARGS.volume = float(oldvol)
            f.kill(); call_sox(stdscr); update()

        # Adjusts sinemod minimum volume
        elif input_char == ord('v'):
            if ARGS.sinemod_min_vol < 90:
                ARGS.sinemod_min_vol += 10
            else:
                ARGS.sinemod_min_vol = 100
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('V'):
            if ARGS.sinemod_min_vol > 10:
                ARGS.sinemod_min_vol -= 10
            else:
                ARGS.sinemod_min_vol = 0
            f.kill(); call_sox(stdscr); update()

        # Toggles sine wave modulation mode
        elif input_char == ord('S'):
            if ARGS.sinemod:
                ARGS.sinemod = False
            else:
                ARGS.sinemod = True
            f.kill(); call_sox(stdscr); update()

        # Adjusts tremolo depth
        elif input_char == ord('t'):
            if ARGS.tremolo_depth < 90:
                ARGS.tremolo_depth += 10
            else:
                ARGS.tremolo_depth = 100
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('T'):
            if ARGS.tremolo_depth > 10:
                ARGS.tremolo_depth -= 10
            else:
                ARGS.tremolo_depth = 0
            f.kill(); call_sox(stdscr); update()

        # Adjusts sinemod frequency
        elif input_char == ord('s'):

            stdscr.timeout(1000000)
            curses.echo(1)

            new_freq = ""
            while len(str(new_freq)) == 0:
                stdscr.addstr(1, 1, "Enter value: ")
                new_freq = stdscr.getstr(1, 14)
            try:
                ARGS.sinemod_speed = float(new_freq)
            except:
                new_freq = 1
                stdscr.addstr(2, 1, "Invalid")
            curses.echo(0)

            # Sets a longer timeout to wait for getch
            f.kill(); call_sox(stdscr); update()

        # Adjusts tremolo frequency
        elif input_char == ord('f'):

            stdscr.timeout(1000000)
            curses.echo(1)

            new_freq = ""
            while len(str(new_freq)) == 0:
                stdscr.addstr(1, 1, "Enter value: ")
                new_freq = stdscr.getstr(1, 14)
            try:
                ARGS.tremolo_speed = float(new_freq)
            except:
                new_freq = 1
                stdscr.addstr(2, 1, "Invalid")
            curses.echo(0)

            # Sets a longer timeout to wait for getch
            f.kill(); call_sox(stdscr); update()

        # Adjusts reverb
        elif input_char == ord('r'):
            if ARGS.reverb < 90:
                ARGS.reverb += 10
            else:
                ARGS.reverb = 100
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('R'):
            if ARGS.reverb > 10:
                ARGS.reverb -= 10
            else:
                ARGS.reverb = 0
            f.kill(); call_sox(stdscr); update()

        # Switch noise types on the fly
        elif input_char == ord('b'):
            ARGS.color = 'brown'
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('w'):
            ARGS.color = 'white'
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('p'):
            ARGS.color = 'pink'
            f.kill(); call_sox(stdscr); update()
        elif input_char == ord('P'):
            ARGS.color = 'pinkbrown'
            f.kill(); call_sox(stdscr); update()

        # Brings up help dialog
        elif input_char == ord('h'):

            # Sets a longer timeout to wait for getch (since the user probably wants to read it)
            stdscr.timeout(1000000)

            # Try and except block to catch when the term gets too tiny
            try:
                stdscr.addstr(6, 0, "9/0 -/+ : adjusts volume")
                stdscr.addstr(7, 0, "m       : toggle mute status")
                stdscr.addstr(9, 0, "r/R     : adjusts reverb level")
                stdscr.addstr(10, 0, "f       : set tremolo frequency")
                stdscr.addstr(11, 0, "d/D     : adjusts tremolo depth")
                stdscr.addstr(12, 0, "S       : toggles sine modulation mode")
                stdscr.addstr(13, 0, "f/F     : adjusts minimum noise volume when sine modulation enabled")
                stdscr.addstr(14, 0, "s       : set sine modulation frequency when enabled")
                stdscr.addstr(16, 0, "p/b/w   : selects different noise profiles")
                stdscr.addstr(17, 0, "  (p)ink (b)rown (w)hite (P)inkbrown", curses.color_pair(2))
                stdscr.addstr(18, 0, "      press h to exit help", curses.color_pair(1))
            except:
                stdscr.clear()
                stdscr.addstr('Terminal too small')

            # Waits for help window to close before allowing any further updates to the screen
            input_char_menu = stdscr.getch()

            if input_char_menu == ord('h'):
                input_char = ''
                # Returns the timeout back to the original value
                stdscr.timeout(int(getch_timeout))
                update()

def call_sox(stdscr):
    global f, tui_started

    # Create the empty list to work with
    subprocess_list = []

    # Parameters that are always passed
    subprocess_list.extend(['play', '-q', '-b', str(ARGS.bitdepth), '-c', str(ARGS.channels), '--null'])

    # Add the colour synth commands
    if ARGS.sinemod:
        if ARGS.color == 'pinkbrown':
            subprocess_list.extend(['synth', str(ARGS.duration), 'brownnoise', 'synth',
                'pinknoise', 'mix', 'synth', 'sine', 'amod', str(ARGS.sinemod_speed), str(ARGS.sinemod_min_vol)])
        elif ARGS.color == 'brown':
            subprocess_list.extend(['synth', str(ARGS.duration), 'brownnoise', 'mix', 'synth',
                'sine', 'amod', str(ARGS.sinemod_speed), str(ARGS.sinemod_min_vol)])
        elif ARGS.color == 'pink':
            subprocess_list.extend(['synth', str(ARGS.duration), 'pinknoise', 'mix', 'synth',
                'sine', 'amod', str(ARGS.sinemod_speed), str(ARGS.sinemod_min_vol)])
        elif ARGS.color == 'white':
            subprocess_list.extend(['synth', str(ARGS.duration), 'whitenoise', 'mix', 'synth',
                'sine', 'amod', str(ARGS.sinemod_speed), str(ARGS.sinemod_min_vol)])
    else:
        if ARGS.color == 'brown':
            subprocess_list.extend(['synth', str(ARGS.duration), 'brownnoise'])
        elif ARGS.color == 'pink':
            subprocess_list.extend(['synth', str(ARGS.duration), 'pinknoise'])
        elif ARGS.color == 'white':
            subprocess_list.extend(['synth', str(ARGS.duration), 'whitenoise'])
        elif ARGS.color == 'pinkbrown':
            # Works best when the noise is downmixed to single channel
            subprocess_list.extend(['-c', '1', 'synth', str(ARGS.duration), 'pinknoise', 'mix', 'brownnoise'])

    # Set the band and centerfreq.  Currently hardcoded to central freq of 2k and bandwidth of 20k
    subprocess_list.extend(['band', '-n', '2000', '20000'])


    # Add the tremolo itself
    if ARGS.tremolo_depth > 0:
        subprocess_list.extend(['tremolo', str(ARGS.tremolo_speed), str(ARGS.tremolo_depth)])

    # Add the reverb
    if ARGS.reverb > 0:
        subprocess_list.extend(['reverb', str(ARGS.reverb)])

    # Add some EQ and volume
    subprocess_list.extend(['bass', '-6', 'treble', '-1', 'vol', str(ARGS.volume)])

    # Don't start the subprocess if SoX is muted
    if ARGS.volume == 0:
        subprocess_list = []

    # Used for subprocess debug
    #exit(" ".join(subprocess_list))

    # If TUI is disabled then keep the normal sox console output
    # Otherwise pipe it all so that only the TUI can be seen
    elif ARGS.disabletui:
        curses.endwin()
        print(" ".join(subprocess_list))
        f = subprocess.call(subprocess_list)
        curses.echo(1); curses.nocbreak(); curses.curs_set(1)
    elif not ARGS.disabletui:
        f = subprocess.Popen(subprocess_list, stderr=subprocess.PIPE, stdout=subprocess.PIPE)

    # Init the TUI unless disabled
    if not tui_started:
        # Starts the tui unless explicitly disabled
        if not ARGS.disabletui:
            tui_init(stdscr)

# Called to shut everything down
def cleanup():
    ''' Clears the terminal title and waits for the subprocess to exit '''
    # Reset terminal title
    stdout.write("\x1b]2;\x07")

    try:
        f.wait()
    except Exception as E:
        exit(E)

    print_license()
    exit('Caught interrupt. Exiting')

if __name__ == '__main__':
    try:
        wrapper(main)
    except KeyboardInterrupt:
        cleanup()
